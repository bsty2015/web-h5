#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var cookieParser = require('cookie-parser-io');
var debug = require('debug')('untitled:server');
var http = require('http');
var redis = require('socket.io-redis');
var SocketIoPayController = require('../controllers/socketIoPayController');
var payController = new SocketIoPayController();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//var io = require('socket.io')(server);
//io.adapter(redis({
//  host: '192.168.10.216',
//  //"host": "172.16.3.222",
//  port: 6379 }));
//io.use(cookieParser('secret word'));
//io.of('/payStatusCheck').use(function(socket, next){
//  //var cookie = socket.request.cookies;
//  //console.log("request------");
//  //console.log(socket.request);
//  //console.log("cookie------");
//  //console.log(cookie);
//  //if(cookie){
//  //  var timestamp = cookie.timestamp;
//  //  var sign = cookie.sign;
//  //  console.log("sign:"+sign);
//  //  console.log("timestamp:"+timestamp);
//  //  console.log(payController.md5(timestamp,'P3A6H3YcGbNDyoEb3e5b8qd3QE6Phh0L812K710Aj2LqO1cA473gus2Dy4pW9C6e'));
//  //}
//  next();
//  //next(new Error('Authentication error'));
//}).on('connection', function (socket) {
//      payController.connect(socket);
//});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    console.log("err" + error.stack);
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
